CPU Utilization、Load Average 和 Context Switch Rate
比如 1 个 1 核 CPU, Load Average < 1 * 1 * 0.7
     1 个 4 核 CPU, Load Average 必须 < 1 * 4 * 0.7 = 2.8
vmstat 查看 r(Load Arerage), in(Interrupt) 和 cs(Context Switch)
vmstat 1 5
vmstat 1 指每秒统计一次, 其中 cs 列就是指上下文切换的数目. 一般情况下, 空闲系统的上下文切换每秒大概在 1500 以下
interrupts(in) 非常高且 context switch(cs) 比较低: 说明这个 CPU 一直在不停的请求资源
context switch(cs) 比 interrupts(in) 要高得多: 说明内核不得不来回切换进程
system time(sy) 很高而 user time(us) 很低, 而且加上高频度的上下文切换(cs), 说明正在运行的应用程序调用了大量的系统调用(system call)
system time(sy) 一直保持在 80％ 以上, 而且上下文切换较低(cs), 说明某个进程可能一直霸占着 CPU(不断请求资源)

run queue(r) 在 14 个线程以上, 按照这个测试机器的硬件配置(四核), 应该保持在 12 个以内
r: 如果是连续的大于在系统中的 CPU 的个数表示系统现在运行比较慢, 有多数的进程等待 CPU.
如果 r 的输出数大于系统中可用 CPU 个数的 4 倍的话, 则系统面临着 CPU 短缺的问题, 或者是 CPU 的速率过低,
系统中有多数的进程在等待 CPU, 造成系统中进程运行过慢

CPU 的利用率, 75% 以上就比较高了, 结合 Load Average 和 Context Switch Rate 来看, 有可能 CPU 高是因为后两个指标高导致的

Linux 性能检测工具 vmstat 命令提供了对进程、内存、页面 I/O 块和 CPU 等信息的监控,
vmstat 可以显示检测结果的平均值或者取样值, 取样模式可以提供一个取样时间段内不同频率的监测结果.

Linux 性能检测工具 vmstat 命令 process(procs)
r: 运行队列中进程数量
b: 等待 IO 的进程数量

Linux 性能检测工具 vmstat 命令 memory
swpd: 使用虚拟内存大小
free: 可用内存大小
buff: 用作缓冲的内存大小
cache: 用作缓存的内存大小

Linux 性能检测工具 vmstat 命令 swap
si: 每秒从交换区写到内存的大小
so: 每秒写入交换区的内存大小

Linux 性能检测工具 vmstat 命令 IO(现在的 Linux 版本块的大小为 1024 bytes)
bi: 从块设备读入数据的总量(读磁盘, 每秒 kb), Blocks sent to a block device (blocks/s).
bo:   块设备写入数据的总量(写磁盘, 每秒 kb), Blocks received from a block device (blocks/s).
这里设置的 bi + bo 参考值为 1000, 如果超过 1000, 而且 wa 值较大应该考虑均衡磁盘负载, 可以结合 iostat 输出来分析.

Linux 性能检测工具 vmstat 命令 system
in：每秒中断数, 包括时钟中断
cs：每秒上下文切换数

Linux 性能检测工具 vmstat 命令 cpu (整个 cpu 运行时间的百分比)
us: 非内核代码(用户进程)执行的时间(user time, 包括 nice 时间)
sy: 内核代码(系统进程)执行的时间(system time)
id: 空闲时间, 在 Linux 2.5.41 之前的内核版本中, 这个值包括 I/O 等待时间
wa: 等待 I/O 时间, 在 Linux 2.5.41 之前的内核版本中这个值为 0

vmstat 命令提供了大量的附加参数, 下面列举几个十分有用的参数：
m: 显示内核的内存利用率
a: 显示内存页面信息, 包括活跃和不活跃的内存页面
n: 显示报头行, 这个参数在使用取样模式并将命令结果输出到一个文件时非常有用. 例如 root# vmstat –n 2 10 以 2 秒的频率显示 10 输出结果
当使用 -p {分区} 时, vmstat 提供对 I/O 结果的统计
